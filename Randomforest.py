#!/usr/bin/env python
# coding: utf-8

# In[22]:


from sklearn.ensemble import RandomForestClassifier
import tensorflow as tf
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
import os 
from tqdm import tqdm
import joblib


# In[2]:


def strip(data):
    columns = data.columns
    new_columns = []
    for i in range(len(columns)):
        new_columns.append(columns[i].strip())
    return new_columns


# In[3]:


path = './Data'
for root, dirs, files in os.walk(path):  
    if files==[]:
        break
    csv = files


# In[4]:


data = pd.DataFrame()
for single_csv in csv:
    if 'csv' in single_csv:
        temp = pd.read_csv(os.path.join(path,single_csv))
    else:
        temp = pd.read_excel(os.path.join(path,single_csv))
    data = pd.concat([temp,data],axis=0)
data.columns = strip(data)


# In[5]:


Label_encoder = {data['Label'].unique()[i]:i for i in range(len(data['Label'].unique()))}


# In[6]:


data['Label']=data['Label'].apply(lambda x:Label_encoder[x])


# In[7]:


positive_len = len(data[data.Label!=1])
negative = data[data['Label'] == 1].sample(n = positive_len)
data_balance = pd.concat([negative,data[data.Label!=1]]).reset_index()
input_data = data_balance[data_balance.columns[:-1]]
input_labels = data_balance['Label']


# In[8]:


def delete_inf(data,label):
    input_data_ = np.array(data)
    input_labels_ = np.array(label)
    inf = np.argwhere(input_data_==np.inf)[:,0]
    inf = list(set(inf))
    input_data_ = np.delete(input_data_,inf,axis=0)
    input_labels_ = np.delete(input_labels_,inf)
    return input_data_,input_labels_


# In[9]:


input_data, input_labels = delete_inf(input_data, input_labels)


# In[10]:


train_data,test_data,train_labels,test_labels = train_test_split(input_data,input_labels,train_size=0.8, test_size=0.2, random_state=41)


# In[11]:


clf = RandomForestClassifier(n_estimators=10)
clf = clf.fit(train_data, train_labels)


# In[23]:


joblib.dump(clf, 'Model/randomforest.pkl')#也可以使用文件对象
clf = joblib.load('Model/randomforest.pkl') 


# In[24]:


lostis = clf.predict_proba(test_data)


# In[25]:


def TopkAccuracy(label,input_data,input_label,k):
    pred_logits = clf.predict_proba(test_data)
    topk = np.argsort(np.array(pred_logits),axis=1)[:,-k:]
    nums=0
    cnt=0
    for index,values in enumerate(input_label):
        if values==label:
            nums+=1
            if values in topk[index]:
                cnt+=1
    return cnt/nums


# In[26]:


def CategoricalAccuracy(label,intput_data,input_label):
    acc = 0
    num = 0
    pred_logits = clf.predict_proba(test_data)
    predict = tf.argmax(pred_logits,axis=1)
    for index,values in enumerate(input_label):
        if values==label:
            num+=1
            if predict[index]==values:
                acc+=1
    return acc/num


# In[27]:


import matplotlib.pyplot as plt


# In[28]:


acc = []
for label in range(6):
    acc.append(TopkAccuracy(label,test_data,test_labels,1))
acc 


# In[29]:


label = ['worm',
 'BENIGN',
 'XSS',
 'Sql Injection',
 'Trojan',
 'Overflow']


# In[30]:


fig,ax = plt.subplots(figsize=(10,5))
b1 = ax.bar(label[0],acc[0])
b2 = ax.bar(label[1],acc[1])
b3 = ax.bar(label[2],acc[2])
b4 = ax.bar(label[3],acc[3])
b5 = ax.bar(label[4],acc[4])
b6 = ax.bar(label[5],acc[5])
for b in b1+b2+b3+b4+b5+b6:
    h = b.get_height()
    ax.text(b.get_x()+b.get_width()/2,h,'%f'%h,ha='center',va='bottom')
plt.xlabel('Label')
plt.ylabel('accuracy')


# In[31]:


np.where(test_labels==5)


# In[ ]:




